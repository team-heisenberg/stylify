// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Business {
  businessID    Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  businessName  String
  businessType  String
  description   String
  location      String
  professionals Professional[]
  reviews       Review[]
  customers     Customer[]
  services      Service[]
  Deal          Deal[]
  appointment   Appointment[]
}

model Professional {
  professionalID      Int                    @id @default(autoincrement())
  businessID          Int
  business            Business               @relation(fields: [businessID], references: [businessID])
  firstName           String
  lastName            String
  photoURL            String                 @default("https://i.pravatar.cc/300")
  professionalService ProfessionalServices[]
  appointment         Appointment[]
  timeSlots           TimeSlot[]

  @@index([businessID])
}

model TimeSlot {
  timeSlotID     Int          @id @default(autoincrement())
  professionalID Int
  professional   Professional @relation(fields: [professionalID], references: [professionalID])
  slot           String

  @@index([professionalID])
}

model Service {
  serviceID           Int                    @id @default(autoincrement())
  business            Business               @relation(fields: [businessID], references: [businessID])
  serviceName         String
  photoURL            String
  serviceTypeID       Int
  servicePrice        Float
  businessID          Int
  durationInMinutes   Int?
  professionalService ProfessionalServices[]
  serviceType         ServiceType            @relation(fields: [serviceTypeID], references: [serviceTypeID])
  deal                Deal[]
  appointmentDetails  AppointmentDetails[]

  @@index([businessID])
  @@index([serviceTypeID])
}

model ProfessionalServices {
  professionalServicesID Int          @id @default(autoincrement())
  serviceID              Int
  professionalID         Int
  service                Service      @relation(fields: [serviceID], references: [serviceID])
  professional           Professional @relation(fields: [professionalID], references: [professionalID])

  @@index([serviceID])
  @@index([professionalID])
}

model ServiceType {
  serviceTypeID Int       @id @default(autoincrement())
  services      Service[]
  serviceType   String
}

model Deal {
  dealID      Int           @id @default(autoincrement())
  business    Business      @relation(fields: [businessID], references: [businessID])
  service     Service       @relation(fields: [serviceID], references: [serviceID])
  dealAmount  Int
  price       Int
  startDate   DateTime
  endDate     DateTime
  businessID  Int
  serviceID   Int
  appointment Appointment[]

  @@index([businessID])
  @@index([serviceID])
}

model Review {
  reviewID          Int          @id @default(autoincrement())
  business          Business?    @relation(fields: [businessID], references: [businessID])
  appointment       Appointment? @relation(fields: [appointmentID], references: [appointmentID])
  appointmentRating Int
  reviewDetails     String
  businessID        Int?
  appointmentID     Int?

  @@index([businessID])
  @@index([appointmentID])
}

model Appointment {
  appointmentID       Int                  @id @default(autoincrement())
  customer            Customer             @relation(fields: [customerID], references: [customerID])
  customerID          Int
  business            Business             @relation(fields: [businessID], references: [businessID])
  businessID          Int
  professional        Professional         @relation(fields: [professionalID], references: [professionalID])
  professionalID      Int
  isConfirmed         Boolean
  reviews             Review[]
  deal                Deal?                @relation(fields: [dealID], references: [dealID])
  dealID              Int?
  appointmentDateTime DateTime
  dateAndTime         String?
  appointmentDetails  AppointmentDetails[]
  appointmentType     AppointmentType      @default(ONLINE)

  @@index([customerID])
  @@index([businessID])
  @@index([professionalID])
  @@index([dealID])
}

model AppointmentDetails {
  appointmentDetailsID Int         @id @default(autoincrement())
  appointment          Appointment @relation(fields: [appointmentID], references: [appointmentID])
  appointmentID        Int
  service              Service     @relation(fields: [serviceID], references: [serviceID])
  serviceID            Int
  price                Float
  amount               Int?

  @@index([appointmentID])
  @@index([serviceID])
}

model Customer {
  customerID         Int           @id @default(autoincrement())
  email              String        @unique
  password           String
  firstName          String
  lastName           String
  appointments       Appointment[]
  avatarURL          String
  business           Business?     @relation(fields: [businessBusinessID], references: [businessID])
  businessBusinessID Int?

  @@index([businessBusinessID])
}

enum AppointmentType {
  ONLINE
  CALL
  WALKIN
}
